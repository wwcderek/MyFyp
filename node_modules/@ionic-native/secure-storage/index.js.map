{"version":3,"sources":["../../../src/@ionic-native/plugins/secure-storage/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,eAAA,EAAiB,MAAA,EAAQ,YAAA,EAAc,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAE9F;;GAEG;AACH;IAEE,6BAAoB,eAAoB;QAApB,oBAAe,GAAf,eAAe,CAAK;IAAI,CAAC;IAE7C;;;;OAIG;IAIH,iCAAG,GAAH,UAAI,GAAW,IAAqB,MAAM,CAAC,CAAC,CAAC;IAE7C;;;;;OAKG;IAIH,iCAAG,GAAH,UAAI,GAAW,EAAE,KAAa,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEzD;;;;OAIG;IAIH,oCAAM,GAAN,UAAO,GAAW,IAAqB,MAAM,CAAC,CAAC,CAAC;IAEhD;;;OAGG;IAIH,kCAAI,GAAJ,cAA4B,MAAM,CAAC,CAAC,CAAC;IAErC;;;OAGG;IAIH,mCAAK,GAAL,cAAwB,MAAM,CAAC,CAAC,CAAC;IAEjC;;;OAGG;IAEH,0CAAY,GAAZ,cAA+B,MAAM,CAAC,CAAC,CAAC;IAE1C,0BAAC;AAAD,CA5DA,AA4DC,IAAA;;AAhDC;IAHC,eAAe,CAAC;QACf,aAAa,EAAE,SAAS;KACzB,CAAC;;;;8CAC2C;AAW7C;IAHC,eAAe,CAAC;QACf,aAAa,EAAE,SAAS;KACzB,CAAC;;;;8CACuD;AAUzD;IAHC,eAAe,CAAC;QACf,aAAa,EAAE,SAAS;KACzB,CAAC;;;;iDAC8C;AAShD;IAHC,eAAe,CAAC;QACf,aAAa,EAAE,SAAS;KACzB,CAAC;;;;+CACmC;AASrC;IAHC,eAAe,CAAC;QACf,aAAa,EAAE,SAAS;KACzB,CAAC;;;;gDAC+B;AAOjC;IADC,eAAe,EAAE;;;;uDACsB;AAI1C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6CG;AASH,IAAa,aAAa;IAAS,iCAAiB;IAApD;;IAoBA,CAAC;IAlBC;;;;OAIG;IAEH,8BAAM,GAAN,UAAO,KAAa;QAClB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,GAAa,EAAE,GAAa;YAC9C,IAAM,QAAQ,GAAG,IAAI,CAAC,eAAa,CAAC,SAAS,EAAE,CAAC,CAAC,cAAM,OAAA,GAAG,CAAC,IAAI,mBAAmB,CAAC,QAAQ,CAAC,CAAC,EAAtC,CAAsC,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;QAC7G,CAAC,CAAC,CAAC;IACL,CAAC;IAQH,oBAAC;AAAD,CApBA,AAoBC,CApBkC,iBAAiB,GAoBnD;AANM,wBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,4BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAXA;IADC,YAAY,EAAE;;;;2CAKd;AAZU,aAAa;IARzB,MAAM,CAAC;QACN,UAAU,EAAE,eAAe;QAC3B,MAAM,EAAE,+BAA+B;QACvC,SAAS,EAAE,+BAA+B;QAC1C,IAAI,EAAE,yDAAyD;QAC/D,SAAS,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;KACpD,CAAC;GAEW,aAAa,CAoBzB;SApBY,aAAa","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CordovaInstance, Plugin, CordovaCheck, IonicNativePlugin } from '@ionic-native/core';\n\n/**\n * @hidden\n */\nexport class SecureStorageObject {\n\n  constructor(private _objectInstance: any) { }\n\n  /**\n   * Gets a stored item\n   * @param key {string}\n   * @returns {Promise<string>}\n   */\n  @CordovaInstance({\n    callbackOrder: 'reverse'\n  })\n  get(key: string): Promise<string> { return; }\n\n  /**\n   * Stores a value\n   * @param key {string}\n   * @param value {string}\n   * @returns {Promise<any>}\n   */\n  @CordovaInstance({\n    callbackOrder: 'reverse'\n  })\n  set(key: string, value: string): Promise<any> { return; }\n\n  /**\n   * Removes a single stored item\n   * @param key {string}\n   * @returns {Promise<string>} returns a promise that resolves with the key that was removed\n   */\n  @CordovaInstance({\n    callbackOrder: 'reverse'\n  })\n  remove(key: string): Promise<string> { return; }\n\n  /**\n   * Get all references from the storage.\n   * @returns {Promise<string[]>} returns a promise that resolves with array of keys storage\n   */\n  @CordovaInstance({\n    callbackOrder: 'reverse'\n  })\n  keys(): Promise<string[]> { return; }\n\n  /**\n   * Clear all references from the storage.\n   * @returns {Promise<any>}\n   */\n  @CordovaInstance({\n    callbackOrder: 'reverse'\n  })\n  clear(): Promise<any> { return; }\n\n  /**\n   * Brings up the screen-lock settings\n   * @returns {Promise<any>}\n   */\n  @CordovaInstance()\n  secureDevice(): Promise<any> { return; }\n\n}\n\n/**\n * @name Secure Storage\n * @description\n * This plugin gets, sets and removes key,value pairs from a device's secure storage.\n *\n * Requires Cordova plugin: `cordova-plugin-secure-storage`. For more info, please see the [Cordova Secure Storage docs](https://github.com/Crypho/cordova-plugin-secure-storage).\n *\n * The browser platform is supported as a mock only. Key/values are stored unencrypted in localStorage.\n *\n * @usage\n *\n * ```typescript\n * import { SecureStorage, SecureStorageObject } from '@ionic-native/secure-storage';\n *\n * constructor(private secureStorage: SecureStorage) { }\n *\n * ...\n *\n * this.secureStorage.create('my_store_name')\n *   .then((storage: SecureStorageObject) => {\n *\n *      storage.get('key')\n *        .then(\n *          data => console.log(data),\n *          error => console.log(error)\n *      );\n *\n *      storage.set('key', 'value')\n *        .then(\n *         data => console.log(data),\n *          error => console.log(error)\n *      );\n *\n *      storage.remove('key')\n *      .then(\n *          data => console.log(data),\n *          error => console.log(error)\n *      );\n *\n *   });\n *\n *\n * ```\n * @classes\n * SecureStorageObject\n */\n@Plugin({\n  pluginName: 'SecureStorage',\n  plugin: 'cordova-plugin-secure-storage',\n  pluginRef: 'cordova.plugins.SecureStorage',\n  repo: 'https://github.com/Crypho/cordova-plugin-secure-storage',\n  platforms: ['Android', 'Browser', 'iOS', 'Windows']\n})\n\nexport class SecureStorage extends IonicNativePlugin {\n\n  /**\n   * Creates a namespaced storage.\n   * @param store {string}\n   * @returns {Promise<SecureStorageObject>}\n   */\n  @CordovaCheck()\n  create(store: string): Promise<SecureStorageObject> {\n    return new Promise((res: Function, rej: Function) => {\n      const instance = new (SecureStorage.getPlugin())(() => res(new SecureStorageObject(instance)), rej, store);\n    });\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}